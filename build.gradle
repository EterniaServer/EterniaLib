plugins {
    id "java"
    id "jacoco"
    id "org.sonarqube" version "3.5.0.2730"
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

jacoco {
    toolVersion = "0.8.8"
}

sonar {
    properties {
        property "sonar.projectName", "${project.name}"
        property "sonar.projectKey", "EterniaServer_EterniaLib"
        property "sonar.organization", "eterniaserver"
        property "sonar.projectVersion", "${project.version}"
        property "sonar.sources", "src/main/java"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.libraries", "build/libs/${project.name}-${project.version}-all.jar"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPath", "${buildDir}/reports/jacoco.xml"
        property "sonar.junit.reportPaths", "${buildDir}/reports/jacoco.xml"
    }
}

group = "br.com.eterniaserver"
version = "4.0-ALPHA"

repositories {
    mavenCentral()
    maven {
        name = "jitpack"
        url "https://jitpack.io"
    }
    maven {
        name = "aikar-repo"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT")
    implementation("com.zaxxer:HikariCP:5.0.1") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation("co.aikar:acf-paper:0.5.1-SNAPSHOT")
    testImplementation("org.xerial:sqlite-jdbc:3.40.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
    testImplementation('org.mockito:mockito-core:4.10.0')
    testImplementation("com.github.MockBukkit:MockBukkit:v1.19-SNAPSHOT")
}


shadowJar {
    relocate "com.zaxxer.hikari", "br.com.eterniaserver.hikari"
    relocate "co.aikar.commands", "br.com.eterniaserver.acf"
    relocate "co.aikar.locales", "br.com.eterniaserver.locales"
}

test {
    useJUnitPlatform()

    dependsOn "cleanTest"

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        xml.outputLocation = file("${buildDir}/reports/jacoco.xml")
    }
    dependsOn(test)
}

tasks.build.dependsOn(shadowJar)

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

tasks.register("cleanJar", {
    exec {
        workingDir "build/libs"
        commandLine "zip", "-d", "${project.name}-${version}-all.jar", "acf*.properties"
    }
})
