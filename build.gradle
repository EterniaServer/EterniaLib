plugins {
    id "java"
    id "jacoco"
    id "maven-publish"
    id "org.sonarqube" version "3.3"
    id "io.freefair.lombok" version "6.6.1"
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

jacoco {
    toolVersion = "0.8.8"
}

sonarqube  {
    properties {
        property "sonar.projectName", "${project.name}"
        property "sonar.projectKey", "EterniaServer_EterniaLib"
        property "sonar.organization", "eterniaserver"
        property "sonar.projectVersion", "${project.version}"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.libraries", "build/libs"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.verbose", "true"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportsPath", "build/test-results/test"
    }
}

group = "br.com.eterniaserver"
version = "4.0.7-ALPHA"

repositories {
    mavenCentral()
    maven {
        name = "jitpack"
        url "https://jitpack.io"
    }
    maven {
        name = "aikar-repo"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT")
    implementation("com.zaxxer:HikariCP:5.0.1") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation("co.aikar:acf-paper:0.5.1-SNAPSHOT")
    testImplementation("org.xerial:sqlite-jdbc:3.40.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
    testImplementation('org.mockito:mockito-inline:5.0.0')
    testImplementation("com.github.MockBukkit:MockBukkit:v1.19-SNAPSHOT")
}


shadowJar {
    relocate "com.zaxxer.hikari", "br.com.eterniaserver.hikari"
    relocate "co.aikar.commands", "br.com.eterniaserver.acf"
    relocate "co.aikar.locales", "br.com.eterniaserver.locales"
}

test {
    useJUnitPlatform()

    dependsOn "cleanTest"

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test.finalizedBy jacocoTestReport

tasks.named("sonarqube").configure {
    dependsOn test
}

tasks.build.dependsOn(shadowJar)

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

publishing {
    repositories {
        maven {
            name = "br.com.eterniaserver"
            url = uri("https://maven.pkg.github.com/eterniaserver/eternialib")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr (MavenPublication) {
            from(components.java)
        }
    }
}
