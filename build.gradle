plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

group = "br.com.eterniaserver"
version = "4.0-ALPHA"

repositories {
    mavenCentral()
    maven {
        name = "jitpack"
        url "https://jitpack.io"
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "mojang"
        url = "https://libraries.minecraft.net"
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT"
    implementation "com.mojang:brigadier:1.0.18"
    implementation "com.zaxxer:HikariCP:5.0.1"
    implementation "org.hibernate:hibernate-core:6.1.2.Final"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
    testImplementation "org.mockito:mockito-core:4.7.0"
    testImplementation "com.github.MockBukkit:MockBukkit:v1.19-SNAPSHOT"
}

shadowJar {
    relocate "com.mojang.brigadier", "br.com.eterniaserver.eternialib.brigadier"
    relocate "com.zaxxer.hikari", "br.com.eterniaserver.hikari"
    relocate "org.hibernate.Hibernate", "br.com.eterniaserver.Hibernate"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

test {
    useJUnitPlatform()

    dependsOn "cleanTest"

    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.build.dependsOn(shadowJar)

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}
